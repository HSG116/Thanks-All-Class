// Teacher Messages Data
const teacherMessages = {
    hamza: {
        title: "ุฑุณุงูุฉ ุฅูู ููุนูููู ุงูุตู ุงูุฎุงูุณ",
        message: `{ ุฃุนุฒุงุฆู ูุนููู ููุนููุงุช ุงูุตู ุงูุฎุงูุณ }

ุฃูุชู ุฃูู ูู ูุชุญ ููุง ุฃุจูุงุจ ุงููุนุฑูุฉ ุจุดูู ุฃูุณุน ุฃูู ูู ุนููููุง ููู ูุญุจ ุงููุฏุฑุณุฉ 

ููุชู ุฏุงูููุง ุตุจูุฑูู ุ ุญููููู ุ ุชุนุงูููููุง ูุฃููุง ุฃููุงุฏูู ุ ูุชุฒุฑุนูุง ูููุง ุญุจ ุงูุชุนูู ูู ุฃูู ุฎุทูุฉ

ุดูุฑุงู ูุฃููู ููุชูุง ุงูุฃุณุงุณ ูุงููุฏ ุงููู ูุณูุชูุง ุจูุทุงูุฉ ูุฑููุชูุง ุจุฏุงูุฉ ุงูุทุฑูู

ูู ูููุฉ ุนููุชููุง ูุทูุงุจ ุบุฒุฉ ููู ุงุจุชุณุงูุฉ ููู ุชุดุฌูุน ูุญููุฑ ุจูููุจูุง ููุฃุจุฏ ุดูุฑุง ูู ุงูููุจ๐ค๐`
    },
    yazan: {
        title: "ุฑุณุงูุฉ ุฅูู ุงูุฃุณุชุงุฐ ูุฒู",
        message: `ุฃุณุชุงุฐูุง ุงููุงุถู ูุฒู

ููุช ููุง ูุฑุดุฏูุง ูู ุงูุฅููุงู ูุจู ุงูุชุนููู ุฒุฑุนุช ูููุง ุงูุทูุฃูููุฉ ุฑุบู ุงูุตุนุงุจ

ูู ุขูุฉ ุดุฑุญุชูุง ููู ุญุฏูุซ ูููุชู ุฎููุฏ ูู ูููุจูุง ูุนุงูู ุงูุฅููุงู ูุงูุฑุญูุฉ

ุฌุฒุงู ุงููู ุฎูุฑูุง ุนูู ูู ูููุฉ ูุทูุชูุง ูุงูุช ููุฑูุง ูู ุฒูู ุงูุธูุงู`
    },
    islam: {
        title: "ุฑุณุงูุฉ ุฅูู ูุณ ุฅุณูุงู",
        message: `ุฃุณุชุงุฐุชู ุงููููุฑุฉ ุฅุณูุงู

ูู ุนุงูู ุฃุตุจุญ ุฅููุชุฑููู ููุช ุฃูุชู ุจูุงุจุชูุง ููููู ูุงูุฅุจุฏุงุน

ูุฏุฑุชู ุนูู ุชุจุณูุท ุงูุชูููููุฌูุง ุฌุนูุชูุง ูุดุนุฑ ุฃููุง ุฃูุฑุจ ูููุณุชูุจู

ุดูุฑูุง ูุฃูู ุงุนุทูุชู ูู ููุจู ูููุญุชููุง ุฃุฏูุงุช ููุจุฑ ูููุง ููุญูู ุฃูุซุฑ`
    },
    alya: {
        title: "ุฑุณุงูุฉ ุฅูู ูุณ ุนููุงุก",
        message: `ูุณ ุนููุงุก ุงูุบุงููุฉ

ุดุฑุญุชู ุจุจุณุงุทุฉ ูุตุจุฑุชู ุจูุญุจุฉ ููู ุชุฌุฑุจุฉ ุนููุชููุง ูุงูุช ุฏุฑุณูุง ูู ุงูุญูุงุฉ

ุฃูุชู ุงูุนูู ุงูููุฒูุฌ ุจุงูุฃูู ููุญู ููุชููู ููู ูููุฉ ุชุดุฌูุน ู ููู ูุญุธุฉ ุชุนูููุง ูููุง ุนูู ูุฏููู.`
    },
    amir: {
        title: "ุฑุณุงูุฉ ุฅูู ุงูุฃุณุชุงุฐ ุฃููุฑ",
        message: `ุฃุณุชุงุฐู ุงููุงุถู ุฃููุฑ

ุนูููุชูุง ุฃู ุงููุบุฉ ููุณุช ูุฌุฑุฏ ูููุงุช ุจู ุฌุณุฑ ููุตููุง ูุนุงูู ุฃูุณุน ูุฃูู ุฃูุจุฑ

ูู ุฃุตุนุจ ุงูุธุฑูู ููุช ููุง ูุตุฏุฑ ููุฑ ูุณูุฏ ุนููุชูุง ุจุฅุตุฑุงุฑ ูุงุญุชููุชูุง ุจูููุงุชู

ุดูุฑูุง ูุฃูู ููุช ุฃุญุฏ ุฃุจุทุงู ุงูุฑุญูุฉ ูุฌุนูุช ุงููุณุชูุจู ูุจุฏู ุฃูุซุฑ ุฅุดุฑุงููุง

ุจุงุฑู ุงููู ููู ุนูููุง ูุฎูููุง`
    },
    mohammad: {
        title: "ุฑุณุงูุฉ ุฅูู ุงูุฃุณุชุงุฐ ูุญูุฏ ุงูุฑุฌูุจ",
        message: `ุฃุณุชุงุฐู ุงููุงุถู ูุญูุฏ

ููุช ุตูุชูุง ููุจูุงุบุฉ ูุฃููููุฉ ููุตุจุฑ ุนูููุชูุง ูุบุชูุง ุงูุฃู ุจุญุจ ูุฅุชูุงู ุฑุบู ุงูุจุนุฏ ูุงูุชุญุฏูุงุช

ูููุงุชู ูุงูุช ูุงูุจูุณู ูุงูุฏุฑูุณ ููู ุชุฑูุช ุฃุซุฑูุง ูู ุฃุนูุงููุง

ูู ูู ุงูุดูุฑ ูุงูุชูุฏูุฑ ูุงูุงูุชูุงู ูุฌุนู ุงููู ุชุนูููู ุตุฏูุฉ ุฌุงุฑูุฉ ูู ุงูุฏููุง ูุงูุขุฎุฑุฉ ๐ค`
    },
    murad: {
        title: "ุฑุณุงูุฉ ุฅูู ุงูุฃุณุชุงุฐ ูุฑุงุฏ",
        message: `ุฃุณุชุงุฐูุง ุงููุญุชุฑู ูุฑุงุฏ

ุงูุช ูุด ุจุณ ุนููุชูุง ุนู ุงูุชุงุฑูุฎ ูุงูุฌุบุฑุงููุง ุนููุชูุง ุนู ุงูููุฉ ูุงูููุงููุฉ ูุงูุตููุฏ

ููุช ุญุงุถุฑูุง ูุนูุง ุจุงูููุจ ูุฏุฑูุณู ูุงูุช ุฃูุซุฑ ูู ูุฌุฑุฏ ูุนูููุงุช ูุงูุช ุฏุฑูุณ ูุทููุฉ ูุญููุฑุฉ ุจุงููุฌุฏุงู

ุฏูุช ูุฏูุฉ ูุจุงุฑู ุงููู ููู ๐`
    }
};

// Administration Messages Data
const adminMessages = {
    administration: {
        title: "ุฑุณุงูุฉ ุฅูู ุทุงูู ุงูุฅุฏุงุฑุฉ ูุงูู",
        message: `ุฅูู ุฅุฏุงุฑุฉ ุงููุฏุฑุณุฉ ุงูุฅููุชุฑูููุฉ ูุฏุฑุณุฉ ใ ุงูุฎุงุฑุฌู ุงุณุงุณู ุนููุง (( 23 )) ใ

ุฃูุชู ููุชู ุงููููู ุงูุฐู ููู ููู ูู ูุฐุง ุงูุจูุงุก

ุฃูุชู "ุงูุตูุช ุงููุฌููู" ุงูุฐู ุธู ููุณู ููุฑุชุจ ููุฏุนู

ูุง ูููุง ูุนุฑู ูุฌูููู ูููุง ููููุง ุดุนุฑูุง ุจูุฌูุฏูู ูู ูู ุชูุงุตูู ููููุง

ูู ุงูุฑุณุงูุฉ ุงูุชู ูุตูุช ูู ุงูุตู ุงูุฐู ููุชุญ ููู ุงููุญุจุฉ ุงูุชู ุชุฌูููุช ุฏุงุฎู ุงููุธุงู

ุฃูุชู ูู ุชููููุง ุฅุฏุงุฑููู ููุท

ููุชู "ูุธุงููุง ุนุงุทูููุง" ูุญูููุง ุญูู ูุดูุช ุงูุฃูุธูุฉ ุงูุฃุฎุฑู`
    },
    counselor: {
        title: "ุฑุณุงูุฉ ุฅูู ุงููุฑุดุฏุฉ ุงูุชุฑุจููุฉ ุขูุงู ุฃุจู ุฒุฑ",
        message: `ูุณ ุขูุงู

ุญุถูู ุงูุชุฑุจูู ูุงู ุนุฒุงุกู ููู ุฃููููู ุงูุชุนุจ ุงูููุณู ููููุงุชู ูุงูุช ุงูุจูุณู ูููููุจ

ุณูุนุชููุง ูู ุบูุฑ ุฃุญูุงู ูููุชู ููุทุฉ ุงูุชูุงุฒู ููุง ุงุฎุชูุช ูุดุงุนุฑูุง

ุดูุฑูุง ูุฃูู ููุชู ุงูุฃูุงู ุญูู ุบุงุจุช ุงูุจููุช ูุงูุณูุฏ ููุง ุชุนุจูุง ุจุตูุช

ูู ุญุฑู ููู ูุญููุฑ ุจุงูุงูุชูุงู ูุงูุฏุนุงุก ๐คโฅ`
    }
};

// Student Messages Data
const studentMessages = {
    mira: {
        name: "ููุฑุง ุฎุงูุฏ ุงููุงุฒุฌู",
        message: "ููุง ูุฌุฑุฏ ุทูุงุจุ ููู ุจูุถููู ุฃุตุจุญูุง ูุนุฑู ูู ููููุ ูุฅูู ุฃูู ููุถู. ุดูุฑูุง ูู ุงูููุจ ููู ูู ุนููู ูุตุจุฑ ูุงุจุชุณู ุฑุบู ุงูุฃูู ๐"
    },
    mohammad: {
        name: "ูุญูุฏ ุฒูุงุฏ ููุนุงู",
        message: "ุฃูุชู ูู ุชุนููููุง ููุท ุฏุฑูุณูุงุ ุจู ููุญุชูููุง ุฏูุนุฉ ููููู ุงูุญูุงุฉ ุจุฅููุงู ุฃูุจุฑ. ุฃูุชู ุจุตูุฉ ูู ุชููุณู โจ"
    }
};

// DOM Elements
const splashScreen = document.getElementById('splash-screen');
const mainContent = document.getElementById('main-content');
const typewriterText = document.getElementById('typewriter-text');
const messageModal = document.getElementById('message-modal');
const studentModal = document.getElementById('student-modal');
const addMessageModal = document.getElementById('add-message-modal');
const confettiContainer = document.getElementById('confetti-container');

// Typewriter control
let currentTypewriterTimeout = null;

// Typewriter Effect
function typeWriter(text, element, speed = 50) {
    // Clear any existing animation
    if (currentTypewriterTimeout) {
        clearTimeout(currentTypewriterTimeout);
        currentTypewriterTimeout = null;
    }
    
    let i = 0;
    element.innerHTML = '';
    
    // Split text into lines
    const lines = text.split('\n');
    let currentLine = 0;
    
    function type() {
        if (currentLine < lines.length) {
            if (i < lines[currentLine].length) {
                // Add character by character in the current line
                element.innerHTML = lines.slice(0, currentLine).join('<br>') +
                    '<br>' + lines[currentLine].slice(0, i + 1);
                i++;
                currentTypewriterTimeout = setTimeout(type, speed);
            } else {
                // Move to next line
                i = 0;
                currentLine++;
                currentTypewriterTimeout = setTimeout(type, speed * 2); // Longer pause between lines
            }
        } else {
            currentTypewriterTimeout = null;
        }
    }
    
    // Set RTL direction and proper styling
    element.style.direction = 'rtl';
    element.style.textAlign = 'right';
    element.style.lineHeight = '2';
    element.style.whiteSpace = 'pre-wrap';
    element.style.fontFamily = 'Tajawal, Arial, sans-serif';
    
    type();
}

// Splash Screen Animation
function initSplashScreen() {
    const splashText = "ููู ูู ุนููู ุจุตุจุฑุ ูุตูุน ุงูุฃูู ูู ููุจ ุงูุฃูู... ุดูุฑูุง ูุนููููุง ๐";
    
    setTimeout(() => {
        typeWriter(splashText, typewriterText, 80);
    }, 1000);
    
    setTimeout(() => {
        splashScreen.style.opacity = '0';
        splashScreen.style.transform = 'translateY(-100%)';
        
        setTimeout(() => {
            splashScreen.style.display = 'none';
            mainContent.classList.remove('hidden');
            mainContent.classList.add('show');
        }, 1000);
    }, 6000);
}

// Confetti Animation
function createConfetti() {
    const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#f9ca24', '#f0932b', '#eb4d4b', '#6c5ce7'];
    
    for (let i = 0; i < 50; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        confetti.style.left = Math.random() * 100 + '%';
        confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
        confetti.style.animationDelay = Math.random() * 3 + 's';
        confettiContainer.appendChild(confetti);
        
        setTimeout(() => {
            confetti.remove();
        }, 4000);
    }
}

// Modal Functions
function openModal(modal) {
    modal.style.display = 'block';
    document.body.style.overflow = 'hidden';
}

function closeModal(modal) {
    // Clear any running typewriter animation
    if (currentTypewriterTimeout) {
        clearTimeout(currentTypewriterTimeout);
        currentTypewriterTimeout = null;
    }
    
    // Clear the message content immediately
    const modalMessage = modal.querySelector('#modal-message');
    if (modalMessage) {
        modalMessage.innerHTML = '';
    }
    
    modal.style.display = 'none';
    document.body.style.overflow = 'auto';
    
    // Remove any remaining confetti
    const confetti = document.querySelectorAll('.confetti');
    confetti.forEach(c => c.remove());
}

// Teacher Message Modal
function showTeacherMessage(teacherId) {
    const teacher = teacherMessages[teacherId];
    if (!teacher) return;
    
    const modalTitle = document.getElementById('modal-title');
    const modalMessage = document.getElementById('modal-message');
    
    // Clear previous content
    modalTitle.textContent = '';
    modalMessage.innerHTML = '';
    
    // Set new content
    modalTitle.textContent = teacher.title;
    
    openModal(messageModal);
    createConfetti();
    
    // Start typewriter effect after a short delay
    setTimeout(() => {
        typeWriter(teacher.message, modalMessage, 30);
    }, 500);
}

// Admin Message Modal
function showAdminMessage(adminId) {
    const admin = adminMessages[adminId];
    if (!admin) return;
    
    const modalTitle = document.getElementById('modal-title');
    const modalMessage = document.getElementById('modal-message');
    
    // Clear previous content
    modalTitle.textContent = '';
    modalMessage.innerHTML = '';
    
    // Set new content
    modalTitle.textContent = admin.title;
    
    openModal(messageModal);
    createConfetti();
    
    // Start typewriter effect after a short delay
    setTimeout(() => {
        typeWriter(admin.message, modalMessage, 30);
    }, 500);
}

// Student Note Modal
function showStudentNote(studentId) {
    const student = studentMessages[studentId];
    if (!student) return;
    
    const studentModalTitle = document.getElementById('student-modal-title');
    const studentModalMessage = document.getElementById('student-modal-message');
    
    // Clear previous content
    studentModalTitle.textContent = '';
    studentModalMessage.innerHTML = '';
    
    // Set new content
    studentModalTitle.textContent = `๐ ุฑุณุงูุฉ ูู ${student.name}`;
    
    openModal(studentModal);
    createFloatingHearts();
    
    // Start typewriter effect after a short delay
    setTimeout(() => {
        typeWriter(student.message, studentModalMessage, 40);
    }, 500);
}

// Floating Hearts Effect
function createFloatingHearts() {
    const hearts = ['๐', '๐', '๐', '๐', '๐'];
    
    for (let i = 0; i < 15; i++) {
        const heart = document.createElement('div');
        heart.textContent = hearts[Math.floor(Math.random() * hearts.length)];
        heart.style.position = 'fixed';
        heart.style.left = Math.random() * 100 + '%';
        heart.style.top = '100%';
        heart.style.fontSize = '2rem';
        heart.style.zIndex = '1001';
        heart.style.pointerEvents = 'none';
        heart.style.animation = 'floatUp 4s ease-out forwards';
        
        document.body.appendChild(heart);
        
        setTimeout(() => {
            heart.remove();
        }, 4000);
    }
}

// Add floating hearts animation to CSS
const style = document.createElement('style');
style.textContent = `
    @keyframes floatUp {
        0% {
            transform: translateY(0) rotate(0deg);
            opacity: 1;
        }
        100% {
            transform: translateY(-100vh) rotate(360deg);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);

// Print Function
function printMessage() {
    const modalContent = document.querySelector('.message-paper').innerHTML;
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
        <html>
            <head>
                <title>ุฑุณุงูุฉ ุดูุฑ</title>
                <style>
                    body { font-family: 'Tajawal', Arial, sans-serif; direction: rtl; text-align: right; padding: 20px; }
                    .message-paper { background: #ffeaa7; padding: 30px; border-radius: 10px; }
                    h3 { color: #2c3e50; text-align: center; }
                    .modal-message { line-height: 1.8; color: #2c3e50; }
                </style>
            </head>
            <body>
                <div class="message-paper">${modalContent}</div>
            </body>
        </html>
    `);
    printWindow.document.close();
    printWindow.print();
}

// Copy Function
function copyMessage() {
    const messageText = document.getElementById('modal-message').textContent;
    const titleText = document.getElementById('modal-title').textContent;
    const fullText = `${titleText}\n\n${messageText}`;
    
    navigator.clipboard.writeText(fullText).then(() => {
        alert('ุชู ูุณุฎ ุงูุฑุณุงูุฉ ุจูุฌุงุญ! ๐');
    }).catch(() => {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = fullText;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        alert('ุชู ูุณุฎ ุงูุฑุณุงูุฉ ุจูุฌุงุญ! ๐');
    });
}

// Custom Message Functions
function loadCustomMessages() {
    const customMessages = JSON.parse(localStorage.getItem('customMessages') || '[]');
    const customMessagesContainer = document.getElementById('custom-messages');
    
    customMessagesContainer.innerHTML = '';
    
    customMessages.forEach((message, index) => {
        const messageCard = document.createElement('div');
        messageCard.className = 'custom-message-card';
        messageCard.innerHTML = `
            <h4 class="custom-message-name">๐ ${message.name}</h4>
            <p class="custom-message-text">${message.message}</p>
        `;
        customMessagesContainer.appendChild(messageCard);
    });
}

function saveCustomMessage(name, message) {
    const customMessages = JSON.parse(localStorage.getItem('customMessages') || '[]');
    customMessages.push({ name, message, date: new Date().toISOString() });
    localStorage.setItem('customMessages', JSON.stringify(customMessages));
    loadCustomMessages();
}

// Event Listeners
document.addEventListener('DOMContentLoaded', function() {
    // Initialize splash screen
    initSplashScreen();
    
    // Load custom messages
    loadCustomMessages();
    
    // Teacher card clicks
    document.querySelectorAll('.teacher-card').forEach(card => {
        const readBtn = card.querySelector('.read-message-btn');
        readBtn.addEventListener('click', () => {
            const teacherId = card.dataset.teacher;
            showTeacherMessage(teacherId);
        });
    });
    
    // Admin card clicks
    document.querySelectorAll('.admin-card').forEach(card => {
        const readBtn = card.querySelector('.read-message-btn');
        readBtn.addEventListener('click', () => {
            const adminId = card.dataset.admin;
            showAdminMessage(adminId);
        });
    });
    
    // Student card clicks
    document.querySelectorAll('.student-card').forEach(card => {
        const noteBtn = card.querySelector('.student-note-btn');
        noteBtn.addEventListener('click', () => {
            const studentId = card.dataset.student;
            showStudentNote(studentId);
        });
    });
    
    // Modal close buttons
    document.querySelectorAll('.close-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const modal = e.target.closest('.modal');
            closeModal(modal);
        });
    });
    
    // Modal background clicks
    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal(modal);
            }
        });
    });
    
    // Print button
    document.getElementById('print-btn').addEventListener('click', printMessage);
    
    // Copy button
    document.getElementById('copy-btn').addEventListener('click', copyMessage);
    
    // Add message button
    document.getElementById('add-message-btn').addEventListener('click', () => {
        openModal(addMessageModal);
    });
    
    // Message form submission
    document.getElementById('message-form').addEventListener('submit', (e) => {
        e.preventDefault();
        
        const teacherName = document.getElementById('student-name').value.trim();
        const message = document.getElementById('message-text').value.trim();
        
        if (teacherName && message) {
            // Create WhatsApp message
            const whatsappMessage = `ูุฑุญุจุงุ ุฃุฑูุฏ ุฃู ุฃุฑุณู ุฑุณุงูุฉ ุดูุฑ ููุฃุณุชุงุฐ/ุฉ ${teacherName}:\n\n${message}\n\nูุน ุงูุชูุฏูุฑ ูุงูุงูุชูุงู ๐`;
            const whatsappUrl = `https://api.whatsapp.com/send?phone=972592311460&text=${encodeURIComponent(whatsappMessage)}`;
            
            // Open WhatsApp
            window.open(whatsappUrl, '_blank');
            
            // Save message locally
            saveCustomMessage(teacherName, message);
            closeModal(addMessageModal);
            
            // Reset form
            document.getElementById('message-form').reset();
            
            // Show success message
            alert('ุชู ุฅุฑุณุงู ุฑุณุงูุชู ุนุจุฑ ูุงุชุณุงุจ! ุดูุฑูุง ูู ๐');
            
            // Create confetti
            createConfetti();
        }
    });
    
    // Contact form submission
    document.querySelector('.contact-form').addEventListener('submit', function(e) {
        e.preventDefault();
        const name = document.getElementById('name').value;
        const phone = document.getElementById('phone').value;
        const message = document.getElementById('message').value;

        const whatsappUrl = `https://api.whatsapp.com/send?phone=972592311460&text=ูุฑุญุจุง%20ุงุณูู%20${encodeURIComponent(name)}%20ุฑูู%20ูุงุชูู%20${encodeURIComponent(phone)}%20ุฃูุฏ%20ุฃู%20ุฃุณุชูุณุฑ%20ุนู:%20${encodeURIComponent(message)}`;

        window.location.href = whatsappUrl;
        this.reset();

        alert('ุดูุฑุงู ูุชูุงุตููู ูุนูุง! ุณูููู ุจุงูุฑุฏ ุนูููู ูู ุฃูุฑุจ ููุช.');
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            document.querySelectorAll('.modal').forEach(modal => {
                if (modal.style.display === 'block') {
                    closeModal(modal);
                }
            });
        }
    });
});

// Smooth scrolling for internal links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// Add scroll animations
function animateOnScroll() {
    const elements = document.querySelectorAll('.teacher-card, .admin-card, .student-card');
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.animation = 'slideInUp 0.8s ease-out forwards';
            }
        });
    }, {
        threshold: 0.1
    });
    
    elements.forEach(element => {
        observer.observe(element);
    });
}

// Initialize scroll animations
document.addEventListener('DOMContentLoaded', animateOnScroll);

// Add floating stars to background
function createFloatingStars() {
    const starsContainer = document.querySelector('.floating-stars');
    if (!starsContainer) return;
    
    for (let i = 0; i < 20; i++) {
        const star = document.createElement('div');
        star.textContent = 'โจ';
        star.style.position = 'absolute';
        star.style.left = Math.random() * 100 + '%';
        star.style.top = Math.random() * 100 + '%';
        star.style.fontSize = Math.random() * 1.5 + 0.5 + 'rem';
        star.style.animation = `float ${Math.random() * 3 + 4}s ease-in-out infinite`;
        star.style.animationDelay = Math.random() * 2 + 's';
        star.style.opacity = Math.random() * 0.8 + 0.2;
        starsContainer.appendChild(star);
    }
}

// Initialize floating stars
setTimeout(createFloatingStars, 2000);

// Add touch support for mobile
let touchStartY = 0;
let touchEndY = 0;

document.addEventListener('touchstart', e => {
    touchStartY = e.changedTouches[0].screenY;
});

document.addEventListener('touchend', e => {
    touchEndY = e.changedTouches[0].screenY;
    handleSwipe();
});

function handleSwipe() {
    const swipeThreshold = 50;
    const diff = touchStartY - touchEndY;
    
    if (Math.abs(diff) > swipeThreshold) {
        if (diff > 0) {
            // Swipe up - could trigger some action
        } else {
            // Swipe down - could trigger some action
        }
    }
}

// Performance optimization: Lazy load animations
function lazyLoadAnimations() {
    const cards = document.querySelectorAll('.teacher-card, .admin-card, .student-card');
    
    const cardObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate');
                cardObserver.unobserve(entry.target);
            }
        });
    }, {
        rootMargin: '50px'
    });
    
    cards.forEach(card => {
        cardObserver.observe(card);
    });
}

// Initialize lazy loading
document.addEventListener('DOMContentLoaded', lazyLoadAnimations);
